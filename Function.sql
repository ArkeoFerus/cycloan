
-------------------------------------------FUNCTION FOR FARE_CALCULATION----------------------------------------

CREATE OR REPLACE FUNCTION FARE_CALCULATION ( TRP_ID IN NUMBER)
RETURN NUMBER IS
	DAYS NUMBER;
	FARE NUMBER;
	TOTAL_FARE NUMBER;
BEGIN
	SELECT (TD.END_DATE_TIME - TD.START_DATE_TIME), C.FARE_PER_DAY	INTO DAYS, FARE FROM TRIP_DETAILS TD, CYCLE C WHERE TD.TRIP_ID = TRP_ID AND TD.CYCLE_ID = C.CYCLE_ID;

	TOTAL_FARE := ROUND(DAYS*FARE, 2);
	RETURN TOTAL_FARE;

EXCEPTION
	WHEN NO_DATA_FOUND THEN
		DBMS_OUTPUT.PUT_LINE('NO DATA');
		RETURN -1;
	WHEN OTHERS THEN
		DBMS_OUTPUT.PUT_LINE('DO NOT KNOW');
		RETURN -1;
END;
/

--------------------------FUNCTION FOR OWNER_RATING_CALCULATION--------------------------

CREATE OR REPLACE FUNCTION OWNER_RATING( OWN_ID IN NUMBER )
RETURN NUMBER IS
	OWNER_RATING NUMBER;
BEGIN

	SELECT NVL(AVG(RATING), 0) INTO OWNER_RATING FROM PEER_REVIEW WHERE OWNER_ID=OWN_ID;
	RETURN OWNER_RATING;

EXCEPTION
	WHEN NO_DATA_FOUND THEN
		DBMS_OUTPUT.PUT_LINE('NO DATA');
		RETURN -1;
	WHEN OTHERS THEN
		DBMS_OUTPUT.PUT_LINE('DO NOT KNOW');
		RETURN -1;
END;
/

--------------------------FUNCTION FOR CYCLE_RATING_CALCULATION---------------------

CREATE OR REPLACE FUNCTION CYCLE_RATING( CYC_ID IN NUMBER )
RETURN NUMBER IS
	CYCLE_RATING NUMBER;
BEGIN

	SELECT NVL(AVG(RATING), 0) INTO CYCLE_RATING FROM CYCLE_REVIEW WHERE CYCLE_ID=CYC_ID;
	RETURN CYCLE_RATING;

EXCEPTION
	WHEN NO_DATA_FOUND THEN
		DBMS_OUTPUT.PUT_LINE('NO DATA');
		RETURN -1;
	WHEN OTHERS THEN
		DBMS_OUTPUT.PUT_LINE('DO NOT KNOW');
		RETURN -1;
END;
/
