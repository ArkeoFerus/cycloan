
-----------------------------INSERT TRIGGER FOR OWNS TABLE--------------------

CREATE OR REPLACE TRIGGER INSERT_OWNS
AFTER INSERT
ON CYCLE
FOR EACH ROW
DECLARE
	OWNER NUMBER;
	CYCLE NUMBER;
BEGIN
	OWNER := :NEW.OWNER_ID;
	CYCLE := :NEW.CYCLE_ID;

	INSERT INTO OWNS(CYCLE_ID, OWNER_ID) VALUES(CYCLE,OWNER);

EXCEPTION
	WHEN NO_DATA_FOUND THEN
		DBMS_OUTPUT.PUT_LINE('NO DATA');
	WHEN OTHERS THEN
		DBMS_OUTPUT.PUT_LINE('DO NOT KNOW');
END;
/

-----------------------------DELETE TRIGGER FOR OWNS TABLE--------------------

CREATE OR REPLACE TRIGGER DELETE_OWNS
BEFORE DELETE
ON CYCLE
FOR EACH ROW
DECLARE
	CYCLE NUMBER;
BEGIN
	CYCLE := :OLD.CYCLE_ID;
	DELETE FROM OWNS WHERE CYCLE_ID=CYCLE;
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		DBMS_OUTPUT.PUT_LINE('NO DATA');
	WHEN OTHERS THEN
		DBMS_OUTPUT.PUT_LINE('DO NOT KNOW');
END;
/

-----------------------------------INSERT TRIGGER FOR RESERVES TABLE-----------------------

CREATE OR REPLACE TRIGGER INSERT_RESERVES
AFTER UPDATE
OF STATUS
ON TRIP_DETAILS
FOR EACH ROW
DECLARE
	NEW_STATUS NUMBER;
	TRIP NUMBER;
	CYC_ID NUMBER;
	CUS_ID NUMBER;
BEGIN

	NEW_STATUS := :NEW.STATUS;
	TRIP := :NEW.TRIP_ID;
	CYC_ID := :NEW.CYCLE_ID;
	CUS_ID := :NEW.CUSTOMER_ID;
	IF NEW_STATUS = 1 THEN
		INSERT INTO RESERVES(TRIP_ID,CYCLE_ID,CUSTOMER_ID) VALUES(TRIP,CYC_ID,CUS_ID);
	END IF;

EXCEPTION
	WHEN NO_DATA_FOUND THEN
		DBMS_OUTPUT.PUT_LINE('NO DATA');
	WHEN OTHERS THEN
		DBMS_OUTPUT.PUT_LINE('DO NOT KNOW');
END;
/
